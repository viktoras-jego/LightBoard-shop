<?php

namespace AppBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\BrowserKit\Response;
use Symfony\Component\HttpFoundation\Request;

/**
 * CarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarRepository extends \Doctrine\ORM\EntityRepository
{
    public function ByPrice(Request $request){

        $qb = $this->createQueryBuilder('c');
        $qb -> select('c');

        if($request->query->has('order')){
            $order = $request->query->get('order');

            if($order == 'Cheapest'){
                $qb -> orderBy('c.price','ASC');
            }
            elseif ($order == 'Expensive'){
                $qb -> orderBy('c.price','DESC');
            }

        }

        if($request->query->has('order2')){
            $order2 = $request->query->get('order2');

            if($order2 == 'more-10'){

                $qb -> where('c.price>10');

            }
            elseif ($order2== 'more-20'){

                $qb -> where('c.price>20');

            }
            elseif($order2 == 'more-30'){

                $qb -> where('c.price>30');

            }
            elseif($order2 == 'more-50'){

                $qb -> where('c.price>50');

            }
            elseif($order2 == 'more-100'){

                $qb -> where('c.price>100');

            }

        }
        if($request->query->has('order3')){
            $order3 = $request->query->get('order3');

            if($order3 == 'less-10'){

                $qb -> andWhere('c.price<10');

            }
            elseif ($order3== 'less-20'){

                $qb -> andWhere('c.price<20');

            }
            elseif($order3 == 'less-30'){

                $qb -> andWhere('c.price<30');

            }
            elseif($order3 == 'less-50'){

                $qb -> andWhere('c.price<50');

            }
            elseif($order3 == 'less-100'){

                $qb -> andWhere('c.price<100');

            }

        }

        if($request->query->has('order4')){
            $order4 = $request->query->get('order4');



            if($order4 == 'Pennyboard'){

                $qb -> andWhere("c.category = 'Pennyboard'");

            }
            elseif ($order4== 'Longboard'){
                $qb -> andWhere("c.category = 'Longboard'");

            }
            elseif($order4 == 'Skateboard'){

                $qb -> andWhere("c.category = 'Skateboard'");

            }

        }

        $currentPage = $request->query->get('page');
        if (!$currentPage || $currentPage < 0) {
            $currentPage = 1;
        }
        $itemsPerPage = 12; //items in one page

        $qb
            ->setMaxResults($itemsPerPage)
            ->setFirstResult(($currentPage-1)*$itemsPerPage);

        $paginator = new Paginator($qb);
        $pages = ceil(count($paginator) / $itemsPerPage);

        if ($pages == 0){
            $pages = 1;
        }

        $paginator->getQuery()->getResult();
        $pagefirst = 1;

        if($pages >= 5 && $currentPage>=3 && $pages-$currentPage == 0){
            $pagefirst = $currentPage - 4;

        }
        elseif($pages >= 5 && $currentPage>=3 && $pages-$currentPage == 1){
            $pagefirst = $currentPage - 3;

        }
        elseif($pages >= 5 && $currentPage>=3){
          $pagefirst = $currentPage - 2;
            $pages = $currentPage + 2;
        }
        elseif ($pages>=5){
            $pages = 5;
        }

        return [
           'query' => $qb ->getQuery()->getResult(),
           'pages' => $pages,
           'pagefirst' => $pagefirst
        ];
    }

    public function DoneOrder(Request $request){ //For left screen side menu
        $qb = $this->createQueryBuilder('d');
        $qb -> select('d');
        $qb -> andWhere("d.delivery = 'Not yet sent'");

        if($request->query->has('orderTime')){
            $ordertime = $request->query->get('orderTime');

            if($ordertime == 'Newest'){

                $qb -> orderBy('d.date','DESC');

            }
            elseif ($ordertime== 'Oldest'){

                $qb -> orderBy('d.date','ASC');

            }
        }

        if($request->query->has('TextSearch')){
            $text = $request->query->get('TextSearch');
            if (ctype_space($text)) {

            }
            else{
             $qb -> andWhere("d.firstName LIKE '%$text%'
              OR d.lastName LIKE '%$text%'
               OR d.address LIKE '%$text%'
                OR d.city LIKE '%$text%'
                 OR d.country LIKE '%$text%'
                  OR d.postcode LIKE '%$text%'
                   OR d.email LIKE '%$text%'
                    OR d.date LIKE '%$text%'
                     OR d.postcode LIKE '%$text%'
                       ");
              //  $qb -> andWhere(" OR d.address LIKE '%$text%'");
              //  $qb -> andWhere(" OR d.city LIKE '%$text%'");
              //  $qb -> andWhere(" OR d.country LIKE '%$text%'");
              //  $qb -> andWhere(" OR d.postcode LIKE '%$text%'");
              //  $qb -> andWhere(" OR d.email LIKE '%$text%'");
              //  $qb -> andWhere(" OR d.date LIKE '%$text%'");
              //  $qb -> andWhere(" OR d.postcode LIKE '%$text%'");
            }

        }
        $currentPage = $request->query->get('page');
        if (!$currentPage || $currentPage < 0) {
            $currentPage = 1;
        }
        $itemsPerPage = 8; //items in one page

        $qb
            ->setMaxResults($itemsPerPage)
            ->setFirstResult(($currentPage-1)*$itemsPerPage);

        $paginator = new Paginator($qb);
        $pages = ceil(count($paginator) / $itemsPerPage);

        if ($pages == 0){
            $pages = 1;
        }

        $paginator->getQuery()->getResult();
        $pagefirst = 1;


        if($pages >= 5 && $currentPage>=3 && $pages-$currentPage == 0){
            $pagefirst = $currentPage - 4;

        }
        elseif($pages >= 5 && $currentPage>=3 && $pages-$currentPage == 1){
            $pagefirst = $currentPage - 3;

        }
        elseif($pages >= 5 && $currentPage>=3){
            $pagefirst = $currentPage - 2;
            $pages = $currentPage + 2;
        }
        elseif ($pages>=5){
            $pages = 5;
        }

        return [
            'query' => $qb ->getQuery()->getResult(),
            'pages' => $pages,
            'pagefirst' => $pagefirst
        ];

    }



    public function NotDoneOrder(Request $request){
        $qb = $this->createQueryBuilder('c');
        $qb -> select('c');
    }


   /* public function MoreThan(Request $request){

        $qb = $this->createQueryBuilder('c');
        $qb -> select('c');


        if($request->query->has('order2')){
            $order2 = $request->query->get('order2');

            if($order2 == 'more-10'){
                $qb -> select('c');
                $qb -> where('c.price>10');

            }
            elseif ($order2== 'more-20'){
                $qb -> select('c');
                $qb -> where('c.price>20');

            }
            elseif($order2 == 'more-30'){
                $qb -> select('c');
                $qb -> where('c.price>30');

            }
            elseif($order2 == 'more-50'){
                $qb -> select('c');
                $qb -> where('c.price>50');

            }
            elseif($order2 == 'more-100'){
                $qb -> select('c');
                $qb -> where('c.price>100');

            }
        }

        return $qb ->getQuery()->getResult();
    }*/

    public function LastId(Request $request){
        $qb = $this->createQueryBuilder('c');
        $qb -> select('c');
        $qb -> orderBy('c.id','DESC');
        $qb ->setMaxResults(1);

        return $qb ->getQuery()->getResult();

    }

    public function Expensive($name){

        $qb = $this->createQueryBuilder('c');
        $qb -> select('c');
        $qb -> where('c.Price=20');
        $qb ->andWhere($qb ->expr()->like('c.comment',':n')); //DEDAM TARP PROCENTU PAGAL CONVENCIJA
        $qb ->setParameter('n','%$name%');

        return $qb ->getQuery()->getResult();

    }
}
